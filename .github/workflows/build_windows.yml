name: Windows

on: [push]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release
  BUILD_PLATFORM: x64
  
  # Versions
  QT_VERSION: 5.15.2
  QT_VS_VERSION: msvc2019_64
  QT_VS_ADDIN_VERSION: 2.7.2
  ZLIB_VERSION: 1.2.11
  SUNDIALS_VERSION: 5.6.1
  HDF5_VERSION: 1.12.0
  GRAPHVIZ_VERSION: 2.49.3

jobs:
  build:
    runs-on: windows-2019

    steps:
    - name: Checkout
      uses: actions/checkout@v2
        
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1
      
    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v2
      with:
        path: ${{github.workspace}}/ExternalLibraries/qt
        key: ${{runner.os}}-QtCache-${{env.QT_VERSION}}
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        # If cached, only install essential build tools and set environmental variables
        cached: ${{steps.cache-qt.outputs.cache-hit}}
        # Version of Qt to install
        version: ${{env.QT_VERSION}}
        # Architecture for Windows/Android
        arch: win64_${{env.QT_VS_VERSION}}
        # Directory to install.
        dir: ${{github.workspace}}/ExternalLibraries/qt
        # Whether or not to automatically run setup-python to find a valid python version.
        setup-python: 'false'
                
    - name: Cache QtMsBuild tools
      id: cache-qt-ms-build-tools
      uses: actions/cache@v2
      with:
        path: ${{github.workspace}}/ExternalLibraries/qtvsaddin
        key: ${{runner.os}}-QtMsBuildCache-${{env.QT_VS_ADDIN_VERSION}}
        
    - name: Get QtMsBuild tools
      if: steps.cache-qt-ms-build-tools.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}
      # Get additional project files to build Qt solution with MSBuild. This work is usually done in Visual Studio with Qt VS Tools extension.
      # Download the extension and extract requited files.
      run: |
        Invoke-WebRequest -Uri https://ftp.fau.de/qtproject/archive/vsaddin/${{env.QT_VS_ADDIN_VERSION}}/qt-vsaddin-msvc2019-${{env.QT_VS_ADDIN_VERSION}}.vsix -MaximumRetryCount 10 -RetryIntervalSec 30 -OutFile vspackage.vsix 
        Expand-Archive vspackage.vsix -DestinationPath ${{github.workspace}}/ExternalLibraries/qtvsaddin
        
    - name: Cache ZLib
      id: cache-zlib
      uses: actions/cache@v2
      with:
        path: ${{github.workspace}}/ExternalLibraries/zlib
        key: ${{runner.os}}-ZLibCache-${{env.ZLIB_VERSION}}
        
    - name: Build ZLib
      if: steps.cache-zlib.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/ExternalLibraries
      shell: pwsh
      # Run the script to build the third-party tool
      run: .\CompileZLib.ps1
      
    - name: Cache SUNDIALS
      id: cache-sundials
      uses: actions/cache@v2
      with:
        path: ${{github.workspace}}/ExternalLibraries/sundials
        key: ${{runner.os}}-SundialsCache-${{env.SUNDIALS_VERSION}}
        
    - name: Build SUNDIALS
      if: steps.cache-sundials.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/ExternalLibraries
      shell: pwsh
      # Run the script to build the third-party tool
      run: .\CompileSundials.ps1
      
    - name: Cache HDF5
      id: cache-hdf5
      uses: actions/cache@v2
      with:
        path: ${{github.workspace}}/ExternalLibraries/hdf5
        key: ${{runner.os}}-Hdf5Cache-${{env.SUNDIALS_VERSION}}
        
    - name: Build HDF5
      if: steps.cache-hdf5.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/ExternalLibraries
      shell: pwsh
      # Run the script to build the third-party tool
      run: .\CompileHDF5.ps1
      
    - name: Cache Graphviz
      id: cache-graphviz
      uses: actions/cache@v2
      with:
        path: ${{github.workspace}}/ExternalLibraries/graphviz
        key: ${{runner.os}}-GraphvizCache-${{env.GRAPHVIZ_VERSION}}
        
    - name: Build Graphviz
      if: steps.cache-graphviz.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/ExternalLibraries
      shell: pwsh
      # Run the script to build the third-party tool
      run: .\CompileGraphviz.ps1
        
    - name: Build
      working-directory: ${{github.workspace}}
      env:
        QtToolsPath: ${{env.Qt5_DIR}}/bin
        QtMsBuild: ${{github.workspace}}/ExternalLibraries/qtvsaddin/QtMsBuild
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: |
        msbuild -maxCpuCount -verbosity:minimal -property:Configuration=${{env.BUILD_CONFIGURATION}} -property:Platform=${{env.BUILD_PLATFORM}} ${{env.SOLUTION_FILE_PATH}}
